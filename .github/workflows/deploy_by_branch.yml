
name: deploy_by_branch
env:
  name: laravel_migration_versioning
  branch: prod

on:
  push:
    branches:
      - 'prod-release'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Using ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            ssh-keygen -F github.com || ssh-keyscan github.com >>~/.ssh/known_hosts

            DEPLOYMENT_COMMIT=${{ github.head_ref || github.ref_name }} 
            echo "github.head_ref : $DEPLOYMENT_COMMIT"
            checkout(){
              echo "CHECKOUT"
              git stash 
              git fetch --all
              git fetch --tags --force
              git config pull.rebase true
              git checkout prod
              git pull origin prod
              git checkout prod-release
              git pull origin prod-release
              HEAD_COMMIT=$(git rev-parse --verify HEAD)
              git checkout $HEAD_COMMIT
            }
            deploy(){
              echo "DEPLOY"
              echo "${{ secrets.ENV_FILE }}" > .env
              checkout
              sh .github/deploy.sh $DEPLOYMENT_COMMIT
            }

            # Clone if Directory not Exist
            [ -d ${{ env.name }} ] || ( 
              echo("Clone Directory")
              git clone git@github.com:radenfajrus/${{ env.name }}.git 
              cd ${{ env.name }} 
              checkout
              cd .. 
            )
            # Clone Directory backup
            [ -d ${{ env.name }}_bak ] || ( 
              echo("Clone Directory backup")
              git clone git@github.com:radenfajrus/${{ env.name }}.git ${{ env.name }}_bak 
              cd ${{ env.name }}_bak 
              checkout
              cd .. 
            )


            echo("Check Deployment Version")
            cd ${{ env.name }}_bak
            checkout
            DEPLOYMENT_COMMIT=$(git rev-parse --verify HEAD)
            DEPLOYMENT_VERSION=$(git describe --tags --abbrev=0 $DEPLOYMENT_COMMIT || echo 0)
            cd ..
            echo "DEPLOYMENT_COMMIT: $DEPLOYMENT_COMMIT"
            echo "DEPLOYMENT_VERSION: $DEPLOYMENT_VERSION"

            echo("Check Running Version")
            cd ${{ env.name }}
            RUNNING_COMMIT=$(git rev-parse --verify HEAD)
            RUNNING_VERSION=$(git describe --tags --abbrev=0 $RUNNING_COMMIT || echo 0)
            cd ..
            echo "RUNNING_COMMIT: $RUNNING_COMMIT"
            echo "RUNNING_VERSION: $RUNNING_VERSION"


            echo $RUNNING_VERSION > temp-version
            echo $DEPLOYMENT_VERSION >> temp-version

            HIGHEST_VERSION=`cat temp-version | sort -rV | head -1`
            rm temp-version

            if [ $HIGHEST_VERSION = $DEPLOYMENT_VERSION ]; then
              echo "Upgrade Version Started"
              echo "Migrate from $RUNNING_VERSION to $DEPLOYMENT_VERSION"
              cd ${{ env.name }}
              deploy
              sh .github/migrate_from_running_version.sh $RUNNING_VERSION
              cd ..
            else 
              echo "Downgrade Version Started"
              echo "Test Deployment Before Rollback"
              cd ${{ env.name }}_bak
              deploy
              cd ..

              echo "Rollback from $RUNNING_VERSION to $DEPLOYMENT_VERSION"
              cd ${{ env.name }}
              sh .github/rollback_to_deployment_version.sh $DEPLOYMENT_VERSION
              deploy
              cd ..
            fi


            
