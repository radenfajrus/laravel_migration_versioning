
name: laravel_migration_versioning
env:
  name: laravel_migration_versioning
  branch: prod

on:
  push:
    tags:
      - '**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Block non prod branch
        if: endsWith(github.event.base_ref, 'prod') == false
        run: exit -1

      - name: Deploy Using ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            ssh-keygen -F github.com || ssh-keyscan github.com >>~/.ssh/known_hosts

            # Clone if Directory not Exist
            [ -d ${{ env.name }} ] || ( 
              git clone git@github.com:radenfajrus/${{ env.name }}.git 
              cd ${{ env.name }} 
              git stash 
              git fetch --all 
              git checkout ${{ env.branch }} 
              git pull 
              cd .. 
            )
            # Clone Directory backup
            [ -d ${{ env.name }}_bak ] || ( 
              git clone git@github.com:radenfajrus/${{ env.name }}.git ${{ env.name }}_bak 
              cd ${{ env.name }}_bak 
              git stash 
              git fetch --all 
              git checkout ${{ env.branch }} 
              git pull 
              cd .. 
            )

            # Check Deployment Version
            cd ${{ env.name }}_bak
            DEPLOYMENT_COMMIT=$GITHUB_SHA
            git stash 
            git fetch --all
            git checkout $DEPLOYMENT_COMMIT
            git pull
            DEPLOYMENT_VERSION=$(git describe --tags --abbrev=0 || echo 0)
            cd ..
            echo $DEPLOYMENT_COMMIT

            # Check Running Version
            cd ${{ env.name }}
            RUNNING_COMMIT=$(git rev-parse --verify HEAD)
            RUNNING_VERSION=$(git describe --tags --abbrev=0 || echo 0)
            cd ..

            echo $RUNNING_VERSION > temp-version
            echo $DEPLOYMENT_VERSION >> temp-version

            HIGHEST_VERSION=`cat temp-version | sort -rV | head -1`
            rm temp-version

            if [ $HIGHEST_VERSION = $DEPLOYMENT_VERSION ]; then
              echo "Upgrade Version Started"
              echo "Migrate from $RUNNING_VERSION to $DEPLOYMENT_VERSION"
              cd ${{ env.name }}
              sh .github/deploy.sh $DEPLOYMENT_COMMIT
              sh .github/migrate_to_deployment_version.sh $DEPLOYMENT_VERSION
              cd ..
            else 
              echo "Downgrade Version Started"
              echo "Test Deployment Before Rollback"
              cd ${{ env.name }}_bak
              sh .github/deploy.sh $DEPLOYMENT_COMMIT
              cd ..

              echo "Rollback from $RUNNING_VERSION to $DEPLOYMENT_VERSION"
              cd ${{ env.name }}
              sh .github/rollback_from_current_version.sh $DEPLOYMENT_VERSION
              sh .github/deploy.sh $DEPLOYMENT_COMMIT
              cd ..
            fi


            
